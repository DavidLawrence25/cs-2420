{
  "meta": {
    "cases": 4,
    "tests": 24,
    "fails": 0
  },
  "test_cases": {
    "PointTest1": [
      {
        "name": "TestAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 21,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ + Point(-5, 2)",
          "value": "(-2, 6)"
        },
        "arg1": {
          "repr": "Point(-2, 6)",
          "value": "(-2, 6)"
        }
      },
      {
        "name": "TestIAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 25,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-2, 5)"
        },
        "arg1": {
          "repr": "Point(-2, 5)",
          "value": "(-2, 5)"
        }
      },
      {
        "name": "TestSub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 29,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ - Point(-9, -5)",
          "value": "(12, 9)"
        },
        "arg1": {
          "repr": "Point(12, 9)",
          "value": "(12, 9)"
        }
      },
      {
        "name": "TestISub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 33,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-4, 13)"
        },
        "arg1": {
          "repr": "Point(-4, 13)",
          "value": "(-4, 13)"
        }
      },
      {
        "name": "TestStreamInsertion",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 42,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "temp",
          "value": "(1, 9)"
        },
        "arg1": {
          "repr": "Point(1, 9)",
          "value": "(1, 9)"
        }
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 48,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "(3, 4)"
        },
        "arg1": {
          "repr": "std::string(\"(3, 4)\")",
          "value": "(3, 4)"
        }
      }
    ],
    "PointTest2": [
      {
        "name": "TestAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 67,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ + Point(-5, 2)",
          "value": "(-15, 5)"
        },
        "arg1": {
          "repr": "Point(-15, 5)",
          "value": "(-15, 5)"
        }
      },
      {
        "name": "TestIAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 71,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-15, 4)"
        },
        "arg1": {
          "repr": "Point(-15, 4)",
          "value": "(-15, 4)"
        }
      },
      {
        "name": "TestSub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 75,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ - Point(-9, -5)",
          "value": "(-1, 8)"
        },
        "arg1": {
          "repr": "Point(-1, 8)",
          "value": "(-1, 8)"
        }
      },
      {
        "name": "TestISub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 79,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-17, 12)"
        },
        "arg1": {
          "repr": "Point(-17, 12)",
          "value": "(-17, 12)"
        }
      },
      {
        "name": "TestStreamInsertion",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 88,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "temp",
          "value": "(-3, 5)"
        },
        "arg1": {
          "repr": "Point(-3, 5)",
          "value": "(-3, 5)"
        }
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 94,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "(-10, 3)"
        },
        "arg1": {
          "repr": "std::string(\"(-10, 3)\")",
          "value": "(-10, 3)"
        }
      }
    ],
    "PointTest3": [
      {
        "name": "TestAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 113,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ + Point(-3, -3)",
          "value": "(-8, -13)"
        },
        "arg1": {
          "repr": "Point(-8, -13)",
          "value": "(-8, -13)"
        }
      },
      {
        "name": "TestIAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 117,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-4, -20)"
        },
        "arg1": {
          "repr": "Point(-4, -20)",
          "value": "(-4, -20)"
        }
      },
      {
        "name": "TestSub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 121,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ - Point(-2, -9)",
          "value": "(-3, -1)"
        },
        "arg1": {
          "repr": "Point(-3, -1)",
          "value": "(-3, -1)"
        }
      },
      {
        "name": "TestISub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 125,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-5, -9)"
        },
        "arg1": {
          "repr": "Point(-5, -9)",
          "value": "(-5, -9)"
        }
      },
      {
        "name": "TestStreamInsertion",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 134,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "temp",
          "value": "(-4, -6)"
        },
        "arg1": {
          "repr": "Point(-4, -6)",
          "value": "(-4, -6)"
        }
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 140,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "(-5, -10)"
        },
        "arg1": {
          "repr": "std::string(\"(-5, -10)\")",
          "value": "(-5, -10)"
        }
      }
    ],
    "PointTest4": [
      {
        "name": "TestAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 159,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ + Point(-3, 1)",
          "value": "(-1, -3)"
        },
        "arg1": {
          "repr": "Point(-1, -3)",
          "value": "(-1, -3)"
        }
      },
      {
        "name": "TestIAdd",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 163,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-5, -8)"
        },
        "arg1": {
          "repr": "Point(-5, -8)",
          "value": "(-5, -8)"
        }
      },
      {
        "name": "TestSub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 167,
        "column": 20,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_ - Point(-6, -1)",
          "value": "(8, -3)"
        },
        "arg1": {
          "repr": "Point(8, -3)",
          "value": "(8, -3)"
        }
      },
      {
        "name": "TestISub",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 171,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "point_",
          "value": "(-7, 2)"
        },
        "arg1": {
          "repr": "Point(-7, 2)",
          "value": "(-7, 2)"
        }
      },
      {
        "name": "TestStreamInsertion",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 180,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "temp",
          "value": "(6, -7)"
        },
        "arg1": {
          "repr": "Point(6, -7)",
          "value": "(6, -7)"
        }
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/01_overloaded_operators/test_cases.h",
        "line": 186,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "(2, -4)"
        },
        "arg1": {
          "repr": "std::string(\"(2, -4)\")",
          "value": "(2, -4)"
        }
      }
    ]
  }
}