{
  "meta": {
    "cases": 5,
    "tests": 27,
    "fails": 0
  },
  "test_cases": {
    "DonutMazeTest": [
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 288,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "###\n# #\n###"
        },
        "arg1": {
          "repr": "kMazeInitializer_",
          "value": "###\n# #\n###"
        }
      },
      {
        "name": "TestSolve",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 292,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.Solve()",
        "value": "false"
      },
      {
        "name": "TestPrintSuccess",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 299,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Could not be solved"
        },
        "arg1": {
          "repr": "std::string(\"Could not be solved\")",
          "value": "Could not be solved"
        }
      }
    ],
    "EasyMazeTest": [
      {
        "name": "TestShouldExploreOutOfBounds",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 65,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(-1, 12)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreEmpty",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 68,
        "column": 35,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.ShouldExplore(3, 5)",
        "value": "true"
      },
      {
        "name": "TestShouldExplorePath",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 72,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(1, 3)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreWall",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 76,
        "column": 34,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(0, 0)",
        "value": "false"
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 81,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "##### #####\n#     #   #\n# ### # # #\n# #     # #\n### ### # #\n#     # # #\n# ##### # #\n#   #   # #\n### # ### #\n#   # #   #\n##### #####"
        },
        "arg1": {
          "repr": "kMazeInitializer_",
          "value": "##### #####\n#     #   #\n# ### # # #\n# #     # #\n### ### # #\n#     # # #\n# ##### # #\n#   #   # #\n### # ### #\n#   # #   #\n##### #####"
        }
      },
      {
        "name": "TestSolve",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 85,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.Solve()",
        "value": "true"
      },
      {
        "name": "TestPrintSuccess",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 92,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Success"
        },
        "arg1": {
          "repr": "std::string(\"Success\")",
          "value": "Success"
        }
      }
    ],
    "GivenMazeTest": [
      {
        "name": "TestShouldExploreOutOfBounds",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 133,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(3, 12)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreEmpty",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 136,
        "column": 35,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.ShouldExplore(2, 1)",
        "value": "true"
      },
      {
        "name": "TestShouldExplorePath",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 140,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(1, 10)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreWall",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 144,
        "column": 34,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(0, 0)",
        "value": "false"
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 149,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "############\n#   #      #\n  # # #### #\n### #    # #\n#    ### #  \n#### # # # #\n#  # # # # #\n## # # # # #\n#        # #\n###### ### #\n#      #   #\n############"
        },
        "arg1": {
          "repr": "kMazeInitializer_",
          "value": "############\n#   #      #\n  # # #### #\n### #    # #\n#    ### #  \n#### # # # #\n#  # # # # #\n## # # # # #\n#        # #\n###### ### #\n#      #   #\n############"
        }
      },
      {
        "name": "TestSolve",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 153,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.Solve()",
        "value": "true"
      },
      {
        "name": "TestPrintSuccess",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 160,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Success"
        },
        "arg1": {
          "repr": "std::string(\"Success\")",
          "value": "Success"
        }
      }
    ],
    "HardMazeTest": [
      {
        "name": "TestShouldExploreOutOfBounds",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 202,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(31, 0)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreEmpty",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 205,
        "column": 35,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.ShouldExplore(0, 1)",
        "value": "true"
      },
      {
        "name": "TestShouldExplorePath",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 209,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(1, 29)",
        "value": "false"
      },
      {
        "name": "TestShouldExploreWall",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 213,
        "column": 34,
        "assertion_type": "false",
        "passed": true,
        "expression": "maze_.ShouldExplore(30, 30)",
        "value": "false"
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 218,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "###############################\n    #         #       #       #\n### # ####### # ####### ### ###\n#   # #     # #     #   #   # #\n# ######### # # # # ##### ### #\n#     #   #   # # #     # # # #\n### # # ##### # # ####### # # #\n#   #   #     # # #       # # #\n# # ### # # ### # # # ##### # #\n# # # # # #   # #   #     # # #\n# ### ####### # ### ####### # #\n#   #         # # #       #   #\n# ####### ##### # ### ####### #\n#   #     #         #   #   # #\n# # # ##### ### ########### # #\n# # # #       #     #     # # #\n# # # ####### ####### ##### # #\n# # #   # # # #       #   # # #\n# # # ### # # # ### ##### # # #\n# # #       #   # #           #\n### ##### ### # # # # ##### # #\n# #   # # #   # # # # #     # #\n# # ### # # ### # ##### ### # #\n#   # #   # # #   #     #   # #\n### # ### # # # ##### ##### # #\n#         #   #   # # #   # # #\n# # # ##### # ##### # ### # # #\n# # # # #   #     # #   #   # #\n### # # ### # ### # # ####### #\n#   #       #   # #         #  \n###############################"
        },
        "arg1": {
          "repr": "kMazeInitializer_",
          "value": "###############################\n    #         #       #       #\n### # ####### # ####### ### ###\n#   # #     # #     #   #   # #\n# ######### # # # # ##### ### #\n#     #   #   # # #     # # # #\n### # # ##### # # ####### # # #\n#   #   #     # # #       # # #\n# # ### # # ### # # # ##### # #\n# # # # # #   # #   #     # # #\n# ### ####### # ### ####### # #\n#   #         # # #       #   #\n# ####### ##### # ### ####### #\n#   #     #         #   #   # #\n# # # ##### ### ########### # #\n# # # #       #     #     # # #\n# # # ####### ####### ##### # #\n# # #   # # # #       #   # # #\n# # # ### # # # ### ##### # # #\n# # #       #   # #           #\n### ##### ### # # # # ##### # #\n# #   # # #   # # # # #     # #\n# # ### # # ### # ##### ### # #\n#   # #   # # #   #     #   # #\n### # ### # # # ##### ##### # #\n#         #   #   # # #   # # #\n# # # ##### # ##### # ### # # #\n# # # # #   #     # #   #   # #\n### # # ### # ### # # ####### #\n#   #       #   # #         #  \n###############################"
        }
      },
      {
        "name": "TestSolve",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 222,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.Solve()",
        "value": "true"
      },
      {
        "name": "TestPrintSuccess",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 229,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Success"
        },
        "arg1": {
          "repr": "std::string(\"Success\")",
          "value": "Success"
        }
      }
    ],
    "TrivialMazeTest": [
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 24,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": " "
        },
        "arg1": {
          "repr": "kMazeInitializer_",
          "value": " "
        }
      },
      {
        "name": "TestSolve",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 28,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "maze_.Solve()",
        "value": "true"
      },
      {
        "name": "TestPrintSuccess",
        "file": "./no_brainers/06_recursion_maze/test_cases.h",
        "line": 35,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Success"
        },
        "arg1": {
          "repr": "std::string(\"Success\")",
          "value": "Success"
        }
      }
    ]
  }
}