{
  "meta": {
    "cases": 4,
    "tests": 15,
    "fails": 0
  },
  "test_cases": {
    "BadStackUseTest": [
      {
        "name": "TestReadEmpty",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 159,
        "column": 26,
        "assertion_type": "false",
        "passed": true,
        "expression": "stack_.top().has_value()",
        "value": "false"
      }
    ],
    "BasicStackTest": [
      {
        "name": "TestPush1",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 75,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.top().value_or(-1)",
          "value": "1"
        },
        "arg1": {
          "repr": "1",
          "value": "1"
        }
      },
      {
        "name": "TestPush5",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 81,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.top().value_or(-1)",
          "value": "5"
        },
        "arg1": {
          "repr": "5",
          "value": "5"
        }
      },
      {
        "name": "TestPush16AndPop12",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 88,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.top().value_or(-1)",
          "value": "4"
        },
        "arg1": {
          "repr": "4",
          "value": "4"
        }
      },
      {
        "name": "TestStreamExtraction",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 96,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"
        },
        "arg1": {
          "repr": "std::string(\"16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\")",
          "value": "16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"
        }
      }
    ],
    "StackSizeTest": [
      {
        "name": "TestEmpty",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 25,
        "column": 22,
        "assertion_type": "true",
        "passed": true,
        "expression": "stack_.empty()",
        "value": "true"
      },
      {
        "name": "TestNotEmpty",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 29,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "stack_.empty()",
        "value": "false"
      },
      {
        "name": "TestWasntEmptyBefore",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 36,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "stack_.empty()",
        "value": "true"
      },
      {
        "name": "TestSizeOf0",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 40,
        "column": 24,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.size()",
          "value": "0"
        },
        "arg1": {
          "repr": "size_t{0}",
          "value": "0"
        }
      },
      {
        "name": "TestSizeOf2",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 45,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.size()",
          "value": "2"
        },
        "arg1": {
          "repr": "size_t{2}",
          "value": "2"
        }
      },
      {
        "name": "TestSizeOf5",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 55,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.size()",
          "value": "5"
        },
        "arg1": {
          "repr": "size_t{5}",
          "value": "5"
        }
      }
    ],
    "StringStackTest": [
      {
        "name": "TestSizeOf3",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 123,
        "column": 24,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.size()",
          "value": "3"
        },
        "arg1": {
          "repr": "size_t{3}",
          "value": "3"
        }
      },
      {
        "name": "TestPopPopReplace",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 130,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.top().value_or(\"you messed up\")",
          "value": "marker"
        },
        "arg1": {
          "repr": "marker",
          "value": "marker"
        }
      },
      {
        "name": "TestPopPopReplacePop",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 140,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "stack_.top().value_or(\"you messed up\")",
          "value": "pencil"
        },
        "arg1": {
          "repr": "std::string(\"pencil\")",
          "value": "pencil"
        }
      },
      {
        "name": "TestClear",
        "file": "./no_brainers/07_stack/test_cases.h",
        "line": 146,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "stack_.empty()",
        "value": "true"
      }
    ]
  }
}