{
  "meta": {
    "cases": 1,
    "tests": 6,
    "fails": 0
  },
  "test_cases": {
    "GraphTest": [
      {
        "name": "TestOrder",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 47,
        "column": 22,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "graph_.order()",
          "value": "10"
        },
        "arg1": {
          "repr": "size_t{10}",
          "value": "10"
        }
      },
      {
        "name": "TestIndexOf7",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 50,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "graph_.IndexOf(7).value_or(kU64Max)",
          "value": "3"
        },
        "arg1": {
          "repr": "uindex_t{3}",
          "value": "3"
        }
      },
      {
        "name": "Test1AdjacentTo4",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 53,
        "column": 29,
        "assertion_type": "true",
        "passed": true,
        "expression": "graph_.Adjacent(1, 4)",
        "value": "true"
      },
      {
        "name": "Test1AdjacentTo0",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 54,
        "column": 29,
        "assertion_type": "true",
        "passed": true,
        "expression": "graph_.Adjacent(1, 0)",
        "value": "true"
      },
      {
        "name": "Test0NotAdjacentTo4",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 55,
        "column": 32,
        "assertion_type": "false",
        "passed": true,
        "expression": "graph_.Adjacent(0, 4)",
        "value": "false"
      },
      {
        "name": "TestStreamExtraction",
        "file": "../../no_brainers/11_graph/test_cases.h",
        "line": 71,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "9: <8, 1> <5, 1> \n2: <7, 1> <0, 1> \n1: <4, 1> <0, 1> \n7: <2, 1> <6, 1> \n5: <9, 1> <8, 1> <6, 1> <4, 1> \n4: <5, 1> <1, 1> \n8: <9, 1> <5, 1> <6, 1> \n3: <6, 1> <0, 1> \n6: <8, 1> <7, 1> <3, 1> <5, 1> \n0: <3, 1> <2, 1> <1, 1> \n"
        },
        "arg1": {
          "repr": "expected",
          "value": "9: <8, 1> <5, 1> \n2: <7, 1> <0, 1> \n1: <4, 1> <0, 1> \n7: <2, 1> <6, 1> \n5: <9, 1> <8, 1> <6, 1> <4, 1> \n4: <5, 1> <1, 1> \n8: <9, 1> <5, 1> <6, 1> \n3: <6, 1> <0, 1> \n6: <8, 1> <7, 1> <3, 1> <5, 1> \n0: <3, 1> <2, 1> <1, 1> \n"
        }
      }
    ]
  }
}