{
  "meta": {
    "cases": 2,
    "tests": 9,
    "fails": 0
  },
  "test_cases": {
    "GumballGuessTest": [
      {
        "name": "TestRound1",
        "line": 97,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "real_sout.str()",
          "value": "Kim: 96\nBrock: 104\n"
        },
        "arg1": {
          "repr": "std::string(\"Kim: 96\nBrock: 104\n\")",
          "value": "Kim: 96\nBrock: 104\n"
        }
      },
      {
        "name": "TestRound2",
        "line": 112,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "real_sout.str()",
          "value": "Brock: 48\nTed: 52\nAna: 48\n"
        },
        "arg1": {
          "repr": "std::string(\"Brock: 48\nTed: 52\nAna: 48\n\")",
          "value": "Brock: 48\nTed: 52\nAna: 48\n"
        }
      }
    ],
    "QueueTest": [
      {
        "name": "TestCopyConstructor",
        "line": 31,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "copy_sout.str()",
          "value": "0\n1\n2\n3\n4\n"
        },
        "arg1": {
          "repr": "std::string(\"0\n1\n2\n3\n4\n\")",
          "value": "0\n1\n2\n3\n4\n"
        }
      },
      {
        "name": "TestCopyConstructorIsDeep",
        "line": 37,
        "assertion_type": "not_equal",
        "passed": true,
        "arg0": {
          "repr": "copy.PeekFront().value()",
          "value": "1"
        },
        "arg1": {
          "repr": "nums_.PeekFront().value()",
          "value": "0"
        }
      },
      {
        "name": "TestAssignOperatorIsDeep",
        "line": 45,
        "assertion_type": "not_equal",
        "passed": true,
        "arg0": {
          "repr": "copy.PeekFront().value()",
          "value": "1"
        },
        "arg1": {
          "repr": "nums_.PeekFront().value()",
          "value": "0"
        }
      },
      {
        "name": "TestEnqueue",
        "line": 51,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "nums_.PeekFront().value_or(-1)",
          "value": "0"
        },
        "arg1": {
          "repr": "0",
          "value": "0"
        }
      },
      {
        "name": "TestDequeue",
        "line": 56,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "nums_.PeekFront().value_or(-1)",
          "value": "1"
        },
        "arg1": {
          "repr": "1",
          "value": "1"
        }
      },
      {
        "name": "TestClear",
        "line": 62,
        "assertion_type": "true",
        "passed": true,
        "expression": "nums_.empty()",
        "value": "true"
      },
      {
        "name": "TestRedundantDequeue",
        "line": 70,
        "assertion_type": "doesnt_throw",
        "passed": true,
        "arg0": {
          "repr": "nums_.Dequeue()",
          "value": "null"
        },
        "arg1": {
          "repr": "std::exception",
          "value": "std::exception"
        }
      }
    ]
  }
}