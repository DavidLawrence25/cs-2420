{
  "meta": {
    "cases": 1,
    "tests": 14,
    "fails": 0
  },
  "test_cases": {
    "BracketTest": [
      {
        "name": "Test1Pair",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 31,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "true"
      },
      {
        "name": "TestMismatchedPair",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 36,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestBackwards",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 41,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestValidMix",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 46,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "true"
      },
      {
        "name": "TestExtraClosing",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 51,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestPulledApart",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 56,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestExtraOpening",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 61,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestValidCode",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 66,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "true"
      },
      {
        "name": "TestInvalidCode",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 71,
        "column": 5,
        "assertion_type": "false",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "false"
      },
      {
        "name": "TestHugeYetValidMess",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 76,
        "column": 5,
        "assertion_type": "true",
        "passed": true,
        "expression": "check.is_balanced()",
        "value": "true"
      },
      {
        "name": "TestCount3IndependentPairs",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 81,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "check.pairs().value()",
          "value": "3"
        },
        "arg1": {
          "repr": "3",
          "value": "3"
        }
      },
      {
        "name": "TestCount4NestedPairs",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 86,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "check.pairs().value()",
          "value": "4"
        },
        "arg1": {
          "repr": "4",
          "value": "4"
        }
      },
      {
        "name": "TestValidStreamExtraction",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 93,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Balanced"
        },
        "arg1": {
          "repr": "std::string(\"Balanced\")",
          "value": "Balanced"
        }
      },
      {
        "name": "TestInvalidStreamExtraction",
        "file": "../../labs/04_bracket_matching/test_cases.h",
        "line": 100,
        "column": 5,
        "assertion_type": "equal",
        "passed": true,
        "arg0": {
          "repr": "sout.str()",
          "value": "Not Balanced"
        },
        "arg1": {
          "repr": "std::string(\"Not Balanced\")",
          "value": "Not Balanced"
        }
      }
    ]
  }
}